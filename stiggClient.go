// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package stigg

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type StiggClient interface {
	GetCustomerByID(ctx context.Context, input GetCustomerByRefIDInput, interceptors ...clientv2.RequestInterceptor) (*GetCustomerByID, error)
	GetCoupons(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetCoupons, error)
	GetPaywall(ctx context.Context, input GetPaywallInput, interceptors ...clientv2.RequestInterceptor) (*GetPaywall, error)
	GetEntitlements(ctx context.Context, query FetchEntitlementsQuery, interceptors ...clientv2.RequestInterceptor) (*GetEntitlements, error)
	GetEntitlement(ctx context.Context, query FetchEntitlementQuery, interceptors ...clientv2.RequestInterceptor) (*GetEntitlement, error)
	CreateCustomer(ctx context.Context, input CustomerInput, interceptors ...clientv2.RequestInterceptor) (*CreateCustomer, error)
	ProvisionCustomer(ctx context.Context, input ProvisionCustomerInput, interceptors ...clientv2.RequestInterceptor) (*ProvisionCustomer, error)
	ImportCustomer(ctx context.Context, input ImportCustomerInput, interceptors ...clientv2.RequestInterceptor) (*ImportCustomer, error)
	UpdateCustomer(ctx context.Context, input UpdateCustomerInput, interceptors ...clientv2.RequestInterceptor) (*UpdateCustomer, error)
	CreateSubscription(ctx context.Context, input SubscriptionInput, interceptors ...clientv2.RequestInterceptor) (*CreateSubscription, error)
	ProvisionSubscription(ctx context.Context, input ProvisionSubscriptionInput, interceptors ...clientv2.RequestInterceptor) (*ProvisionSubscription, error)
	UpdateSubscription(ctx context.Context, input UpdateSubscriptionInput, interceptors ...clientv2.RequestInterceptor) (*UpdateSubscription, error)
	CancelSubscription(ctx context.Context, input SubscriptionCancellationInput, interceptors ...clientv2.RequestInterceptor) (*CancelSubscription, error)
	InitiateCheckout(ctx context.Context, input InitiateCheckoutInput, interceptors ...clientv2.RequestInterceptor) (*InitiateCheckout, error)
	EstimateSubscription(ctx context.Context, input EstimateSubscriptionInput, interceptors ...clientv2.RequestInterceptor) (*EstimateSubscription, error)
	EstimateSubscriptionUpdate(ctx context.Context, input EstimateSubscriptionUpdateInput, interceptors ...clientv2.RequestInterceptor) (*EstimateSubscriptionUpdate, error)
	ReportUsage(ctx context.Context, input UsageMeasurementCreateInput, interceptors ...clientv2.RequestInterceptor) (*ReportUsage, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, interceptors ...clientv2.RequestInterceptor) StiggClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, interceptors...)}
}

type Query struct {
	CurrentUser                User                                "json:\"currentUser\" graphql:\"currentUser\""
	Entitlement                Entitlement                         "json:\"entitlement\" graphql:\"entitlement\""
	CachedEntitlements         []*Entitlement                      "json:\"cachedEntitlements\" graphql:\"cachedEntitlements\""
	Entitlements               []*EntitlementWithSummary           "json:\"entitlements\" graphql:\"entitlements\""
	StripeProducts             StripeProductSearchResult           "json:\"stripeProducts\" graphql:\"stripeProducts\""
	StripeCustomers            StripeCustomerSearchResult          "json:\"stripeCustomers\" graphql:\"stripeCustomers\""
	StripeSubscriptions        StripeSubscriptionSearchResult      "json:\"stripeSubscriptions\" graphql:\"stripeSubscriptions\""
	FetchAccount               *Account                            "json:\"fetchAccount,omitempty\" graphql:\"fetchAccount\""
	CurrentEnvironment         string                              "json:\"currentEnvironment\" graphql:\"currentEnvironment\""
	Members                    MemberConnection                    "json:\"members\" graphql:\"members\""
	Products                   ProductConnection                   "json:\"products\" graphql:\"products\""
	Environments               EnvironmentConnection               "json:\"environments\" graphql:\"environments\""
	GetExperimentStats         ExperimentStats                     "json:\"getExperimentStats\" graphql:\"getExperimentStats\""
	Experiment                 *Experiment                         "json:\"experiment,omitempty\" graphql:\"experiment\""
	Experiments                ExperimentConnection                "json:\"experiments\" graphql:\"experiments\""
	SubscriptionMigrationTasks SubscriptionMigrationTaskConnection "json:\"subscriptionMigrationTasks\" graphql:\"subscriptionMigrationTasks\""
	ImportIntegrationTasks     ImportIntegrationTaskConnection     "json:\"importIntegrationTasks\" graphql:\"importIntegrationTasks\""
	Integrations               IntegrationConnection               "json:\"integrations\" graphql:\"integrations\""
	CustomerSubscriptions      CustomerSubscriptionConnection      "json:\"customerSubscriptions\" graphql:\"customerSubscriptions\""
	Features                   FeatureConnection                   "json:\"features\" graphql:\"features\""
	PackageEntitlements        PackageEntitlementConnection        "json:\"packageEntitlements\" graphql:\"packageEntitlements\""
	PromotionalEntitlements    PromotionalEntitlementConnection    "json:\"promotionalEntitlements\" graphql:\"promotionalEntitlements\""
	CustomerPortal             CustomerPortal                      "json:\"customerPortal\" graphql:\"customerPortal\""
	GetCustomerByRefID         *Customer                           "json:\"getCustomerByRefId,omitempty\" graphql:\"getCustomerByRefId\""
	SdkConfiguration           *SdkConfiguration                   "json:\"sdkConfiguration,omitempty\" graphql:\"sdkConfiguration\""
	WidgetConfiguration        WidgetConfiguration                 "json:\"widgetConfiguration\" graphql:\"widgetConfiguration\""
	Customers                  CustomerConnection                  "json:\"customers\" graphql:\"customers\""
	GetPaywall                 []*Plan                             "json:\"getPaywall\" graphql:\"getPaywall\""
	Paywall                    Paywall                             "json:\"paywall\" graphql:\"paywall\""
	MockPaywall                MockPaywall                         "json:\"mockPaywall\" graphql:\"mockPaywall\""
	GetPlanByRefID             *Plan                               "json:\"getPlanByRefId,omitempty\" graphql:\"getPlanByRefId\""
	GetAddonByRefID            *Addon                              "json:\"getAddonByRefId,omitempty\" graphql:\"getAddonByRefId\""
	Plans                      PlanConnection                      "json:\"plans\" graphql:\"plans\""
	Addons                     AddonConnection                     "json:\"addons\" graphql:\"addons\""
	Coupon                     *Coupon                             "json:\"coupon,omitempty\" graphql:\"coupon\""
	Coupons                    CouponConnection                    "json:\"coupons\" graphql:\"coupons\""
	UsageHistory               UsageHistory                        "json:\"usageHistory\" graphql:\"usageHistory\""
	UsageMeasurements          UsageMeasurementConnection          "json:\"usageMeasurements\" graphql:\"usageMeasurements\""
	TestHookData               TestHook                            "json:\"testHookData\" graphql:\"testHookData\""
	SendTestHook               TestHookResult                      "json:\"sendTestHook\" graphql:\"sendTestHook\""
	Hook                       *Hook                               "json:\"hook,omitempty\" graphql:\"hook\""
	Hooks                      HookConnection                      "json:\"hooks\" graphql:\"hooks\""
}
type Mutation struct {
	ResendEmailVerification                  string                               "json:\"resendEmailVerification\" graphql:\"resendEmailVerification\""
	ReportEntitlementCheckRequested          bool                                 "json:\"reportEntitlementCheckRequested\" graphql:\"reportEntitlementCheckRequested\""
	ResyncIntegration                        ResyncIntegrationResult              "json:\"resyncIntegration\" graphql:\"resyncIntegration\""
	TriggerImportCatalog                     AsyncTaskResult                      "json:\"triggerImportCatalog\" graphql:\"triggerImportCatalog\""
	TriggerImportCustomers                   AsyncTaskResult                      "json:\"triggerImportCustomers\" graphql:\"triggerImportCustomers\""
	UpdateAccount                            Account                              "json:\"updateAccount\" graphql:\"updateAccount\""
	CreateAccount                            Member                               "json:\"createAccount\" graphql:\"createAccount\""
	DeleteEnvironment                        string                               "json:\"deleteEnvironment\" graphql:\"deleteEnvironment\""
	CreateOneEnvironment                     Environment                          "json:\"createOneEnvironment\" graphql:\"createOneEnvironment\""
	InviteMembers                            MembersInviteResponse                "json:\"inviteMembers\" graphql:\"inviteMembers\""
	RegisterMember                           User                                 "json:\"registerMember\" graphql:\"registerMember\""
	RemoveMember                             string                               "json:\"removeMember\" graphql:\"removeMember\""
	HideGettingStartedPage                   string                               "json:\"hideGettingStartedPage\" graphql:\"hideGettingStartedPage\""
	CreateOneProduct                         Product                              "json:\"createOneProduct\" graphql:\"createOneProduct\""
	UpdateOneProduct                         Product                              "json:\"updateOneProduct\" graphql:\"updateOneProduct\""
	DeleteOneProduct                         ProductDeleteResponse                "json:\"deleteOneProduct\" graphql:\"deleteOneProduct\""
	UpdateOneEnvironment                     Environment                          "json:\"updateOneEnvironment\" graphql:\"updateOneEnvironment\""
	DeleteOneEnvironment                     EnvironmentDeleteResponse            "json:\"deleteOneEnvironment\" graphql:\"deleteOneEnvironment\""
	CreateOneExperiment                      Experiment                           "json:\"createOneExperiment\" graphql:\"createOneExperiment\""
	UpdateOneExperiment                      Experiment                           "json:\"updateOneExperiment\" graphql:\"updateOneExperiment\""
	StartExperiment                          string                               "json:\"startExperiment\" graphql:\"startExperiment\""
	StopExperiment                           string                               "json:\"stopExperiment\" graphql:\"stopExperiment\""
	CreateOneIntegration                     Integration                          "json:\"createOneIntegration\" graphql:\"createOneIntegration\""
	UpdateOneIntegration                     Integration                          "json:\"updateOneIntegration\" graphql:\"updateOneIntegration\""
	DeleteOneIntegration                     IntegrationDeleteResponse            "json:\"deleteOneIntegration\" graphql:\"deleteOneIntegration\""
	CancelSubscription                       CustomerSubscription                 "json:\"cancelSubscription\" graphql:\"cancelSubscription\""
	CreateSubscription                       CustomerSubscription                 "json:\"createSubscription\" graphql:\"createSubscription\""
	ProvisionSubscription                    ProvisionSubscriptionResult          "json:\"provisionSubscription\" graphql:\"provisionSubscription\""
	ProvisionSubscriptionV2                  ProvisionSubscriptionResult          "json:\"provisionSubscriptionV2\" graphql:\"provisionSubscriptionV2\""
	MigrateSubscriptionToLatest              CustomerSubscription                 "json:\"migrateSubscriptionToLatest\" graphql:\"migrateSubscriptionToLatest\""
	UpdateOneSubscription                    CustomerSubscription                 "json:\"updateOneSubscription\" graphql:\"updateOneSubscription\""
	EstimateSubscription                     SubscriptionPreview                  "json:\"estimateSubscription\" graphql:\"estimateSubscription\""
	EstimateSubscriptionUpdate               SubscriptionPreview                  "json:\"estimateSubscriptionUpdate\" graphql:\"estimateSubscriptionUpdate\""
	SetExperimentOnCustomerSubscription      CustomerSubscription                 "json:\"setExperimentOnCustomerSubscription\" graphql:\"setExperimentOnCustomerSubscription\""
	SetCouponOnCustomerSubscription          CustomerSubscription                 "json:\"setCouponOnCustomerSubscription\" graphql:\"setCouponOnCustomerSubscription\""
	RemoveExperimentFromCustomerSubscription CustomerSubscription                 "json:\"removeExperimentFromCustomerSubscription\" graphql:\"removeExperimentFromCustomerSubscription\""
	RemoveCouponFromCustomerSubscription     CustomerSubscription                 "json:\"removeCouponFromCustomerSubscription\" graphql:\"removeCouponFromCustomerSubscription\""
	CreateFeature                            Feature                              "json:\"createFeature\" graphql:\"createFeature\""
	UpdateFeature                            Feature                              "json:\"updateFeature\" graphql:\"updateFeature\""
	DeleteFeature                            Feature                              "json:\"deleteFeature\" graphql:\"deleteFeature\""
	DeleteOneFeature                         Feature                              "json:\"deleteOneFeature\" graphql:\"deleteOneFeature\""
	CreateOneFeature                         Feature                              "json:\"createOneFeature\" graphql:\"createOneFeature\""
	UpdateOneFeature                         Feature                              "json:\"updateOneFeature\" graphql:\"updateOneFeature\""
	UpdateEntitlementsOrder                  []*UpdateEntitlementsOrderDto        "json:\"updateEntitlementsOrder\" graphql:\"updateEntitlementsOrder\""
	CreateManyPackageEntitlements            []*PackageEntitlement                "json:\"createManyPackageEntitlements\" graphql:\"createManyPackageEntitlements\""
	UpdateOnePackageEntitlement              PackageEntitlement                   "json:\"updateOnePackageEntitlement\" graphql:\"updateOnePackageEntitlement\""
	DeleteOnePackageEntitlement              PackageEntitlementDeleteResponse     "json:\"deleteOnePackageEntitlement\" graphql:\"deleteOnePackageEntitlement\""
	CreateManyPromotionalEntitlements        []*PromotionalEntitlement            "json:\"createManyPromotionalEntitlements\" graphql:\"createManyPromotionalEntitlements\""
	UpdateOnePromotionalEntitlement          PromotionalEntitlement               "json:\"updateOnePromotionalEntitlement\" graphql:\"updateOnePromotionalEntitlement\""
	DeleteOnePromotionalEntitlement          PromotionalEntitlementDeleteResponse "json:\"deleteOnePromotionalEntitlement\" graphql:\"deleteOnePromotionalEntitlement\""
	CreateOneCustomer                        Customer                             "json:\"createOneCustomer\" graphql:\"createOneCustomer\""
	ProvisionCustomer                        ProvisionedCustomer                  "json:\"provisionCustomer\" graphql:\"provisionCustomer\""
	DeleteOneCustomer                        Customer                             "json:\"deleteOneCustomer\" graphql:\"deleteOneCustomer\""
	ImportOneCustomer                        Customer                             "json:\"importOneCustomer\" graphql:\"importOneCustomer\""
	UpdateOneCustomer                        Customer                             "json:\"updateOneCustomer\" graphql:\"updateOneCustomer\""
	InitAddStripeCustomerPaymentMethod       InitAddStripeCustomerPaymentMethod   "json:\"initAddStripeCustomerPaymentMethod\" graphql:\"initAddStripeCustomerPaymentMethod\""
	AttachCustomerPaymentMethod              Customer                             "json:\"attachCustomerPaymentMethod\" graphql:\"attachCustomerPaymentMethod\""
	SetWidgetConfiguration                   *string                              "json:\"setWidgetConfiguration,omitempty\" graphql:\"setWidgetConfiguration\""
	SetCouponOnCustomer                      Customer                             "json:\"setCouponOnCustomer\" graphql:\"setCouponOnCustomer\""
	SetExperimentOnCustomer                  Customer                             "json:\"setExperimentOnCustomer\" graphql:\"setExperimentOnCustomer\""
	RemoveCouponFromCustomer                 Customer                             "json:\"removeCouponFromCustomer\" graphql:\"removeCouponFromCustomer\""
	RemoveExperimentFromCustomer             Customer                             "json:\"removeExperimentFromCustomer\" graphql:\"removeExperimentFromCustomer\""
	CreateOnePlan                            Plan                                 "json:\"createOnePlan\" graphql:\"createOnePlan\""
	PublishPlan                              PublishPackageResult                 "json:\"publishPlan\" graphql:\"publishPlan\""
	ArchivePlan                              Plan                                 "json:\"archivePlan\" graphql:\"archivePlan\""
	RemovePlanDraft                          string                               "json:\"removePlanDraft\" graphql:\"removePlanDraft\""
	CreatePlanDraft                          Plan                                 "json:\"createPlanDraft\" graphql:\"createPlanDraft\""
	UpdateOnePlan                            Plan                                 "json:\"updateOnePlan\" graphql:\"updateOnePlan\""
	CreateOneAddon                           Addon                                "json:\"createOneAddon\" graphql:\"createOneAddon\""
	RemoveAddonDraft                         string                               "json:\"removeAddonDraft\" graphql:\"removeAddonDraft\""
	UpdateOneAddon                           Addon                                "json:\"updateOneAddon\" graphql:\"updateOneAddon\""
	CreateAddonDraft                         Addon                                "json:\"createAddonDraft\" graphql:\"createAddonDraft\""
	PublishAddon                             PublishPackageResult                 "json:\"publishAddon\" graphql:\"publishAddon\""
	SetPackagePricing                        PackagePrice                         "json:\"setPackagePricing\" graphql:\"setPackagePricing\""
	SetBasePlanOnPlan                        Plan                                 "json:\"setBasePlanOnPlan\" graphql:\"setBasePlanOnPlan\""
	AddCompatibleAddonsToPlan                Plan                                 "json:\"addCompatibleAddonsToPlan\" graphql:\"addCompatibleAddonsToPlan\""
	SetCompatibleAddonsOnPlan                Plan                                 "json:\"setCompatibleAddonsOnPlan\" graphql:\"setCompatibleAddonsOnPlan\""
	RemoveBasePlanFromPlan                   Plan                                 "json:\"removeBasePlanFromPlan\" graphql:\"removeBasePlanFromPlan\""
	RemoveCompatibleAddonsFromPlan           Plan                                 "json:\"removeCompatibleAddonsFromPlan\" graphql:\"removeCompatibleAddonsFromPlan\""
	DeleteOneAddon                           AddonDeleteResponse                  "json:\"deleteOneAddon\" graphql:\"deleteOneAddon\""
	DeleteOnePrice                           PriceDeleteResponse                  "json:\"deleteOnePrice\" graphql:\"deleteOnePrice\""
	CreateOneCoupon                          Coupon                               "json:\"createOneCoupon\" graphql:\"createOneCoupon\""
	UpdateOneCoupon                          Coupon                               "json:\"updateOneCoupon\" graphql:\"updateOneCoupon\""
	ArchiveOneCoupon                         Coupon                               "json:\"archiveOneCoupon\" graphql:\"archiveOneCoupon\""
	CreateUsageMeasurement                   UsageMeasurement                     "json:\"createUsageMeasurement\" graphql:\"createUsageMeasurement\""
	CreateOneHook                            Hook                                 "json:\"createOneHook\" graphql:\"createOneHook\""
	UpdateOneHook                            Hook                                 "json:\"updateOneHook\" graphql:\"updateOneHook\""
	DeleteOneHook                            HookDeleteResponse                   "json:\"deleteOneHook\" graphql:\"deleteOneHook\""
	InitiateCheckout                         Checkout                             "json:\"initiateCheckout\" graphql:\"initiateCheckout\""
}
type PlanFragment struct {
	ID                    string                           "json:\"id\" graphql:\"id\""
	DisplayName           string                           "json:\"displayName\" graphql:\"displayName\""
	Description           *string                          "json:\"description\" graphql:\"description\""
	Metadata              map[string]interface{}           "json:\"metadata\" graphql:\"metadata\""
	Product               PlanFragment_Product             "json:\"product\" graphql:\"product\""
	BasePlan              *PlanFragment_BasePlan           "json:\"basePlan\" graphql:\"basePlan\""
	Entitlements          []*PackageEntitlementFragment    "json:\"entitlements\" graphql:\"entitlements\""
	InheritedEntitlements []*PackageEntitlementFragment    "json:\"inheritedEntitlements\" graphql:\"inheritedEntitlements\""
	CompatibleAddons      []*AddonFragment                 "json:\"compatibleAddons\" graphql:\"compatibleAddons\""
	Prices                []*PriceFragment                 "json:\"prices\" graphql:\"prices\""
	PricingType           *PricingType                     "json:\"pricingType\" graphql:\"pricingType\""
	DefaultTrialConfig    *PlanFragment_DefaultTrialConfig "json:\"defaultTrialConfig\" graphql:\"defaultTrialConfig\""
}
type TotalPriceFragment struct {
	SubTotal TotalPriceFragment_SubTotal "json:\"subTotal\" graphql:\"subTotal\""
	Total    TotalPriceFragment_Total    "json:\"total\" graphql:\"total\""
}
type PriceFragment struct {
	BillingModel  BillingModel        "json:\"billingModel\" graphql:\"billingModel\""
	BillingPeriod BillingPeriod       "json:\"billingPeriod\" graphql:\"billingPeriod\""
	Price         PriceFragment_Price "json:\"price\" graphql:\"price\""
	Feature       *FeatureFragment    "json:\"feature\" graphql:\"feature\""
}
type PackageEntitlementFragment struct {
	UsageLimit        *float64                "json:\"usageLimit\" graphql:\"usageLimit\""
	HasUnlimitedUsage *bool                   "json:\"hasUnlimitedUsage\" graphql:\"hasUnlimitedUsage\""
	FeatureID         string                  "json:\"featureId\" graphql:\"featureId\""
	ResetPeriod       *EntitlementResetPeriod "json:\"resetPeriod\" graphql:\"resetPeriod\""
	Feature           *FeatureFragment        "json:\"feature\" graphql:\"feature\""
}
type AddonFragment struct {
	ID           string                        "json:\"id\" graphql:\"id\""
	DisplayName  string                        "json:\"displayName\" graphql:\"displayName\""
	Description  *string                       "json:\"description\" graphql:\"description\""
	Metadata     map[string]interface{}        "json:\"metadata\" graphql:\"metadata\""
	Entitlements []*PackageEntitlementFragment "json:\"entitlements\" graphql:\"entitlements\""
	PricingType  *PricingType                  "json:\"pricingType\" graphql:\"pricingType\""
}
type SubscriptionFragment struct {
	ID                      string                         "json:\"id\" graphql:\"id\""
	Status                  SubscriptionStatus             "json:\"status\" graphql:\"status\""
	StartDate               string                         "json:\"startDate\" graphql:\"startDate\""
	EndDate                 *string                        "json:\"endDate\" graphql:\"endDate\""
	TrialEndDate            *string                        "json:\"trialEndDate\" graphql:\"trialEndDate\""
	CancellationDate        *string                        "json:\"cancellationDate\" graphql:\"cancellationDate\""
	EffectiveEndDate        *string                        "json:\"effectiveEndDate\" graphql:\"effectiveEndDate\""
	CurrentBillingPeriodEnd *string                        "json:\"currentBillingPeriodEnd\" graphql:\"currentBillingPeriodEnd\""
	Metadata                map[string]interface{}         "json:\"metadata\" graphql:\"metadata\""
	BillingID               *string                        "json:\"billingId\" graphql:\"billingId\""
	BillingLinkURL          *string                        "json:\"billingLinkUrl\" graphql:\"billingLinkUrl\""
	Prices                  []*SubscriptionFragment_Prices "json:\"prices\" graphql:\"prices\""
	TotalPrice              *TotalPriceFragment            "json:\"totalPrice\" graphql:\"totalPrice\""
	PricingType             PricingType                    "json:\"pricingType\" graphql:\"pricingType\""
	Plan                    *PlanFragment                  "json:\"plan\" graphql:\"plan\""
	Addons                  []*SubscriptionFragment_Addons "json:\"addons\" graphql:\"addons\""
}
type PromotionalEntitlementFragment struct {
	Status            PromotionalEntitlementStatus "json:\"status\" graphql:\"status\""
	UsageLimit        *float64                     "json:\"usageLimit\" graphql:\"usageLimit\""
	FeatureID         string                       "json:\"featureId\" graphql:\"featureId\""
	HasUnlimitedUsage *bool                        "json:\"hasUnlimitedUsage\" graphql:\"hasUnlimitedUsage\""
	ResetPeriod       *EntitlementResetPeriod      "json:\"resetPeriod\" graphql:\"resetPeriod\""
	EndDate           *string                      "json:\"endDate\" graphql:\"endDate\""
	IsVisible         bool                         "json:\"isVisible\" graphql:\"isVisible\""
	Feature           *FeatureFragment             "json:\"feature\" graphql:\"feature\""
}
type CouponFragment struct {
	ID             string                 "json:\"id\" graphql:\"id\""
	Name           string                 "json:\"name\" graphql:\"name\""
	Description    *string                "json:\"description\" graphql:\"description\""
	Type           CouponType             "json:\"type\" graphql:\"type\""
	DiscountValue  float64                "json:\"discountValue\" graphql:\"discountValue\""
	Metadata       map[string]interface{} "json:\"metadata\" graphql:\"metadata\""
	CreatedAt      string                 "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt      string                 "json:\"updatedAt\" graphql:\"updatedAt\""
	BillingID      *string                "json:\"billingId\" graphql:\"billingId\""
	BillingLinkURL *string                "json:\"billingLinkUrl\" graphql:\"billingLinkUrl\""
	Status         CouponStatus           "json:\"status\" graphql:\"status\""
}
type CustomerFragment struct {
	ID                      string                            "json:\"id\" graphql:\"id\""
	Name                    *string                           "json:\"name\" graphql:\"name\""
	Email                   *string                           "json:\"email\" graphql:\"email\""
	CreatedAt               *string                           "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt               string                            "json:\"updatedAt\" graphql:\"updatedAt\""
	Subscriptions           []*SubscriptionFragment           "json:\"subscriptions\" graphql:\"subscriptions\""
	PromotionalEntitlements []*PromotionalEntitlementFragment "json:\"promotionalEntitlements\" graphql:\"promotionalEntitlements\""
	HasPaymentMethod        bool                              "json:\"hasPaymentMethod\" graphql:\"hasPaymentMethod\""
	Coupon                  *CouponFragment                   "json:\"coupon\" graphql:\"coupon\""
	BillingID               *string                           "json:\"billingId\" graphql:\"billingId\""
	Metadata                map[string]interface{}            "json:\"metadata\" graphql:\"metadata\""
}
type SlimSubscriptionFragment struct {
	ID                      string                             "json:\"id\" graphql:\"id\""
	Status                  SubscriptionStatus                 "json:\"status\" graphql:\"status\""
	Metadata                map[string]interface{}             "json:\"metadata\" graphql:\"metadata\""
	BillingID               *string                            "json:\"billingId\" graphql:\"billingId\""
	BillingLinkURL          *string                            "json:\"billingLinkUrl\" graphql:\"billingLinkUrl\""
	EffectiveEndDate        *string                            "json:\"effectiveEndDate\" graphql:\"effectiveEndDate\""
	CurrentBillingPeriodEnd *string                            "json:\"currentBillingPeriodEnd\" graphql:\"currentBillingPeriodEnd\""
	PricingType             PricingType                        "json:\"pricingType\" graphql:\"pricingType\""
	Prices                  []*SlimSubscriptionFragment_Prices "json:\"prices\" graphql:\"prices\""
	TotalPrice              *TotalPriceFragment                "json:\"totalPrice\" graphql:\"totalPrice\""
	Plan                    SlimSubscriptionFragment_Plan      "json:\"plan\" graphql:\"plan\""
	Addons                  []*SlimSubscriptionFragment_Addons "json:\"addons\" graphql:\"addons\""
	Customer                SlimSubscriptionFragment_Customer  "json:\"customer\" graphql:\"customer\""
}
type PaywallPlanFragment struct {
	ID                    string                                  "json:\"id\" graphql:\"id\""
	Description           *string                                 "json:\"description\" graphql:\"description\""
	DisplayName           string                                  "json:\"displayName\" graphql:\"displayName\""
	Product               PaywallPlanFragment_Product             "json:\"product\" graphql:\"product\""
	BasePlan              *PaywallPlanFragment_BasePlan           "json:\"basePlan\" graphql:\"basePlan\""
	Entitlements          []*PaywallPackageEntitlementFragment    "json:\"entitlements\" graphql:\"entitlements\""
	Metadata              map[string]interface{}                  "json:\"metadata\" graphql:\"metadata\""
	InheritedEntitlements []*PaywallPackageEntitlementFragment    "json:\"inheritedEntitlements\" graphql:\"inheritedEntitlements\""
	Prices                []*PaywallPriceFragment                 "json:\"prices\" graphql:\"prices\""
	PricingType           *PricingType                            "json:\"pricingType\" graphql:\"pricingType\""
	DefaultTrialConfig    *PaywallPlanFragment_DefaultTrialConfig "json:\"defaultTrialConfig\" graphql:\"defaultTrialConfig\""
	CompatibleAddons      []*PaywallAddonFragment                 "json:\"compatibleAddons\" graphql:\"compatibleAddons\""
}
type FeatureFragment struct {
	ID                 string      "json:\"id\" graphql:\"id\""
	FeatureType        FeatureType "json:\"featureType\" graphql:\"featureType\""
	MeterType          *MeterType  "json:\"meterType\" graphql:\"meterType\""
	FeatureUnits       *string     "json:\"featureUnits\" graphql:\"featureUnits\""
	FeatureUnitsPlural *string     "json:\"featureUnitsPlural\" graphql:\"featureUnitsPlural\""
	DisplayName        string      "json:\"displayName\" graphql:\"displayName\""
	Description        *string     "json:\"description\" graphql:\"description\""
}
type EntitlementFeatureFragment struct {
	ID                 string      "json:\"id\" graphql:\"id\""
	FeatureType        FeatureType "json:\"featureType\" graphql:\"featureType\""
	MeterType          *MeterType  "json:\"meterType\" graphql:\"meterType\""
	FeatureUnits       *string     "json:\"featureUnits\" graphql:\"featureUnits\""
	FeatureUnitsPlural *string     "json:\"featureUnitsPlural\" graphql:\"featureUnitsPlural\""
	DisplayName        string      "json:\"displayName\" graphql:\"displayName\""
	Description        *string     "json:\"description\" graphql:\"description\""
}
type PaywallPackageEntitlementFragment struct {
	UsageLimit        *float64                "json:\"usageLimit\" graphql:\"usageLimit\""
	HasUnlimitedUsage *bool                   "json:\"hasUnlimitedUsage\" graphql:\"hasUnlimitedUsage\""
	FeatureID         string                  "json:\"featureId\" graphql:\"featureId\""
	ResetPeriod       *EntitlementResetPeriod "json:\"resetPeriod\" graphql:\"resetPeriod\""
	Feature           *FeatureFragment        "json:\"feature\" graphql:\"feature\""
}
type PaywallPriceFragment struct {
	BillingModel  BillingModel               "json:\"billingModel\" graphql:\"billingModel\""
	BillingPeriod BillingPeriod              "json:\"billingPeriod\" graphql:\"billingPeriod\""
	Price         PaywallPriceFragment_Price "json:\"price\" graphql:\"price\""
	Feature       *FeatureFragment           "json:\"feature\" graphql:\"feature\""
}
type PaywallAddonFragment struct {
	ID           string                               "json:\"id\" graphql:\"id\""
	DisplayName  string                               "json:\"displayName\" graphql:\"displayName\""
	Description  *string                              "json:\"description\" graphql:\"description\""
	Entitlements []*PaywallPackageEntitlementFragment "json:\"entitlements\" graphql:\"entitlements\""
	Prices       []*PaywallPriceFragment              "json:\"prices\" graphql:\"prices\""
	Metadata     map[string]interface{}               "json:\"metadata\" graphql:\"metadata\""
	PricingType  *PricingType                         "json:\"pricingType\" graphql:\"pricingType\""
}
type SubscriptionPreviewFragment struct {
	SubTotal           SubscriptionPreviewFragment_SubTotal           "json:\"subTotal\" graphql:\"subTotal\""
	Total              SubscriptionPreviewFragment_Total              "json:\"total\" graphql:\"total\""
	BillingPeriodRange SubscriptionPreviewFragment_BillingPeriodRange "json:\"billingPeriodRange\" graphql:\"billingPeriodRange\""
	Proration          *SubscriptionPreviewFragment_Proration         "json:\"proration\" graphql:\"proration\""
}
type EntitlementFragment struct {
	IsGranted                bool                                          "json:\"isGranted\" graphql:\"isGranted\""
	AccessDeniedReason       *AccessDeniedReason                           "json:\"accessDeniedReason\" graphql:\"accessDeniedReason\""
	CustomerID               *string                                       "json:\"customerId\" graphql:\"customerId\""
	UsageLimit               *float64                                      "json:\"usageLimit\" graphql:\"usageLimit\""
	HasUnlimitedUsage        bool                                          "json:\"hasUnlimitedUsage\" graphql:\"hasUnlimitedUsage\""
	CurrentUsage             *float64                                      "json:\"currentUsage\" graphql:\"currentUsage\""
	RequestedUsage           *float64                                      "json:\"requestedUsage\" graphql:\"requestedUsage\""
	NextResetDate            *string                                       "json:\"nextResetDate\" graphql:\"nextResetDate\""
	ResetPeriod              *EntitlementResetPeriod                       "json:\"resetPeriod\" graphql:\"resetPeriod\""
	Feature                  *EntitlementFeatureFragment                   "json:\"feature\" graphql:\"feature\""
	ResetPeriodConfiguration *EntitlementFragment_ResetPeriodConfiguration "json:\"resetPeriodConfiguration\" graphql:\"resetPeriodConfiguration\""
}
type PlanFragment_Product struct {
	ID          string  "json:\"id\" graphql:\"id\""
	DisplayName *string "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description\" graphql:\"description\""
}
type PlanFragment_BasePlan struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}
type PlanFragment_Prices_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type PlanFragment_DefaultTrialConfig struct {
	Duration float64          "json:\"duration\" graphql:\"duration\""
	Units    TrialPeriodUnits "json:\"units\" graphql:\"units\""
}
type TotalPriceFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type TotalPriceFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type SubscriptionFragment_Prices_Price_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type SubscriptionFragment_Prices struct {
	UsageLimit *float64       "json:\"usageLimit\" graphql:\"usageLimit\""
	Price      *PriceFragment "json:\"price\" graphql:\"price\""
}
type SubscriptionFragment_TotalPrice_TotalPriceFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type SubscriptionFragment_TotalPrice_TotalPriceFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type SubscriptionFragment_Plan_PlanFragment_Product struct {
	ID          string  "json:\"id\" graphql:\"id\""
	DisplayName *string "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description\" graphql:\"description\""
}
type SubscriptionFragment_Plan_PlanFragment_BasePlan struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}
type SubscriptionFragment_Plan_PlanFragment_Prices_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type SubscriptionFragment_Plan_PlanFragment_DefaultTrialConfig struct {
	Duration float64          "json:\"duration\" graphql:\"duration\""
	Units    TrialPeriodUnits "json:\"units\" graphql:\"units\""
}
type SubscriptionFragment_Addons struct {
	ID       string         "json:\"id\" graphql:\"id\""
	Quantity float64        "json:\"quantity\" graphql:\"quantity\""
	Addon    *AddonFragment "json:\"addon\" graphql:\"addon\""
}
type CustomerFragment_Subscriptions_SubscriptionFragment_Prices_Price_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type CustomerFragment_Subscriptions_SubscriptionFragment_Prices struct {
	UsageLimit *float64       "json:\"usageLimit\" graphql:\"usageLimit\""
	Price      *PriceFragment "json:\"price\" graphql:\"price\""
}
type CustomerFragment_Subscriptions_SubscriptionFragment_TotalPrice_TotalPriceFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type CustomerFragment_Subscriptions_SubscriptionFragment_TotalPrice_TotalPriceFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_Product struct {
	ID          string  "json:\"id\" graphql:\"id\""
	DisplayName *string "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description\" graphql:\"description\""
}
type CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_BasePlan struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}
type CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_Prices_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_DefaultTrialConfig struct {
	Duration float64          "json:\"duration\" graphql:\"duration\""
	Units    TrialPeriodUnits "json:\"units\" graphql:\"units\""
}
type CustomerFragment_Subscriptions_SubscriptionFragment_Addons struct {
	ID       string         "json:\"id\" graphql:\"id\""
	Quantity float64        "json:\"quantity\" graphql:\"quantity\""
	Addon    *AddonFragment "json:\"addon\" graphql:\"addon\""
}
type SlimSubscriptionFragment_Prices_Price_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type SlimSubscriptionFragment_Prices struct {
	UsageLimit *float64       "json:\"usageLimit\" graphql:\"usageLimit\""
	Price      *PriceFragment "json:\"price\" graphql:\"price\""
}
type SlimSubscriptionFragment_TotalPrice_TotalPriceFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type SlimSubscriptionFragment_TotalPrice_TotalPriceFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type SlimSubscriptionFragment_Plan struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SlimSubscriptionFragment_Addons_Addon struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SlimSubscriptionFragment_Addons struct {
	Quantity float64                               "json:\"quantity\" graphql:\"quantity\""
	Addon    SlimSubscriptionFragment_Addons_Addon "json:\"addon\" graphql:\"addon\""
}
type SlimSubscriptionFragment_Customer struct {
	ID string "json:\"id\" graphql:\"id\""
}
type PaywallPlanFragment_Product struct {
	ID          string  "json:\"id\" graphql:\"id\""
	DisplayName *string "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description\" graphql:\"description\""
}
type PaywallPlanFragment_BasePlan struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}
type PaywallPlanFragment_Prices_PaywallPriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type PaywallPlanFragment_DefaultTrialConfig struct {
	Duration float64          "json:\"duration\" graphql:\"duration\""
	Units    TrialPeriodUnits "json:\"units\" graphql:\"units\""
}
type PaywallPlanFragment_CompatibleAddons_PaywallAddonFragment_Prices_PaywallPriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type PaywallPriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type PaywallAddonFragment_Prices_PaywallPriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type SubscriptionPreviewFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type SubscriptionPreviewFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type SubscriptionPreviewFragment_BillingPeriodRange struct {
	Start *string "json:\"start\" graphql:\"start\""
	End   *string "json:\"end\" graphql:\"end\""
}
type SubscriptionPreviewFragment_Proration_Credit struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type SubscriptionPreviewFragment_Proration_Debit struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type SubscriptionPreviewFragment_Proration struct {
	ProrationDate string                                       "json:\"prorationDate\" graphql:\"prorationDate\""
	Credit        SubscriptionPreviewFragment_Proration_Credit "json:\"credit\" graphql:\"credit\""
	Debit         SubscriptionPreviewFragment_Proration_Debit  "json:\"debit\" graphql:\"debit\""
}
type EntitlementFragment_ResetPeriodConfiguration_MonthlyResetPeriodConfig struct {
	MonthlyAccordingTo *MonthlyAccordingTo "json:\"monthlyAccordingTo\" graphql:\"monthlyAccordingTo\""
}
type EntitlementFragment_ResetPeriodConfiguration_WeeklyResetPeriodConfig struct {
	WeeklyAccordingTo *WeeklyAccordingTo "json:\"weeklyAccordingTo\" graphql:\"weeklyAccordingTo\""
}
type EntitlementFragment_ResetPeriodConfiguration struct {
	MonthlyResetPeriodConfig EntitlementFragment_ResetPeriodConfiguration_MonthlyResetPeriodConfig "graphql:\"... on MonthlyResetPeriodConfig\""
	WeeklyResetPeriodConfig  EntitlementFragment_ResetPeriodConfiguration_WeeklyResetPeriodConfig  "graphql:\"... on WeeklyResetPeriodConfig\""
}
type getCustomerById_GetCustomerByRefID_CustomerFragment_Subscriptions_SubscriptionFragment_Prices_Price_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type getCustomerById_GetCustomerByRefID_CustomerFragment_Subscriptions_SubscriptionFragment_Prices struct {
	UsageLimit *float64       "json:\"usageLimit\" graphql:\"usageLimit\""
	Price      *PriceFragment "json:\"price\" graphql:\"price\""
}
type getCustomerById_GetCustomerByRefID_CustomerFragment_Subscriptions_SubscriptionFragment_TotalPrice_TotalPriceFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type getCustomerById_GetCustomerByRefID_CustomerFragment_Subscriptions_SubscriptionFragment_TotalPrice_TotalPriceFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type getCustomerById_GetCustomerByRefID_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_Product struct {
	ID          string  "json:\"id\" graphql:\"id\""
	DisplayName *string "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description\" graphql:\"description\""
}
type getCustomerById_GetCustomerByRefID_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_BasePlan struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}
type getCustomerById_GetCustomerByRefID_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_Prices_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type getCustomerById_GetCustomerByRefID_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_DefaultTrialConfig struct {
	Duration float64          "json:\"duration\" graphql:\"duration\""
	Units    TrialPeriodUnits "json:\"units\" graphql:\"units\""
}
type getCustomerById_GetCustomerByRefID_CustomerFragment_Subscriptions_SubscriptionFragment_Addons struct {
	ID       string         "json:\"id\" graphql:\"id\""
	Quantity float64        "json:\"quantity\" graphql:\"quantity\""
	Addon    *AddonFragment "json:\"addon\" graphql:\"addon\""
}
type getCoupons_Coupons_Edges struct {
	Node *CouponFragment "json:\"node\" graphql:\"node\""
}
type getCoupons_Coupons struct {
	Edges []*getCoupons_Coupons_Edges "json:\"edges\" graphql:\"edges\""
}
type getPaywall_GetPaywall_PaywallPlanFragment_Product struct {
	ID          string  "json:\"id\" graphql:\"id\""
	DisplayName *string "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description\" graphql:\"description\""
}
type getPaywall_GetPaywall_PaywallPlanFragment_BasePlan struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}
type getPaywall_GetPaywall_PaywallPlanFragment_Prices_PaywallPriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type getPaywall_GetPaywall_PaywallPlanFragment_DefaultTrialConfig struct {
	Duration float64          "json:\"duration\" graphql:\"duration\""
	Units    TrialPeriodUnits "json:\"units\" graphql:\"units\""
}
type getPaywall_GetPaywall_PaywallPlanFragment_CompatibleAddons_PaywallAddonFragment_Prices_PaywallPriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type getEntitlements_Entitlements_EntitlementFragment_ResetPeriodConfiguration_MonthlyResetPeriodConfig struct {
	MonthlyAccordingTo *MonthlyAccordingTo "json:\"monthlyAccordingTo\" graphql:\"monthlyAccordingTo\""
}
type getEntitlements_Entitlements_EntitlementFragment_ResetPeriodConfiguration_WeeklyResetPeriodConfig struct {
	WeeklyAccordingTo *WeeklyAccordingTo "json:\"weeklyAccordingTo\" graphql:\"weeklyAccordingTo\""
}
type getEntitlements_Entitlements_EntitlementFragment_ResetPeriodConfiguration struct {
	MonthlyResetPeriodConfig getEntitlements_Entitlements_EntitlementFragment_ResetPeriodConfiguration_MonthlyResetPeriodConfig "graphql:\"... on MonthlyResetPeriodConfig\""
	WeeklyResetPeriodConfig  getEntitlements_Entitlements_EntitlementFragment_ResetPeriodConfiguration_WeeklyResetPeriodConfig  "graphql:\"... on WeeklyResetPeriodConfig\""
}
type getEntitlement_Entitlement_EntitlementFragment_ResetPeriodConfiguration_MonthlyResetPeriodConfig struct {
	MonthlyAccordingTo *MonthlyAccordingTo "json:\"monthlyAccordingTo\" graphql:\"monthlyAccordingTo\""
}
type getEntitlement_Entitlement_EntitlementFragment_ResetPeriodConfiguration_WeeklyResetPeriodConfig struct {
	WeeklyAccordingTo *WeeklyAccordingTo "json:\"weeklyAccordingTo\" graphql:\"weeklyAccordingTo\""
}
type getEntitlement_Entitlement_EntitlementFragment_ResetPeriodConfiguration struct {
	MonthlyResetPeriodConfig getEntitlement_Entitlement_EntitlementFragment_ResetPeriodConfiguration_MonthlyResetPeriodConfig "graphql:\"... on MonthlyResetPeriodConfig\""
	WeeklyResetPeriodConfig  getEntitlement_Entitlement_EntitlementFragment_ResetPeriodConfiguration_WeeklyResetPeriodConfig  "graphql:\"... on WeeklyResetPeriodConfig\""
}
type createCustomer_CreateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Prices_Price_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type createCustomer_CreateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Prices struct {
	UsageLimit *float64       "json:\"usageLimit\" graphql:\"usageLimit\""
	Price      *PriceFragment "json:\"price\" graphql:\"price\""
}
type createCustomer_CreateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_TotalPrice_TotalPriceFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type createCustomer_CreateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_TotalPrice_TotalPriceFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type createCustomer_CreateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_Product struct {
	ID          string  "json:\"id\" graphql:\"id\""
	DisplayName *string "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description\" graphql:\"description\""
}
type createCustomer_CreateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_BasePlan struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}
type createCustomer_CreateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_Prices_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type createCustomer_CreateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_DefaultTrialConfig struct {
	Duration float64          "json:\"duration\" graphql:\"duration\""
	Units    TrialPeriodUnits "json:\"units\" graphql:\"units\""
}
type createCustomer_CreateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Addons struct {
	ID       string         "json:\"id\" graphql:\"id\""
	Quantity float64        "json:\"quantity\" graphql:\"quantity\""
	Addon    *AddonFragment "json:\"addon\" graphql:\"addon\""
}
type provisionCustomer_ProvisionCustomer_Customer_CustomerFragment_Subscriptions_SubscriptionFragment_Prices_Price_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type provisionCustomer_ProvisionCustomer_Customer_CustomerFragment_Subscriptions_SubscriptionFragment_Prices struct {
	UsageLimit *float64       "json:\"usageLimit\" graphql:\"usageLimit\""
	Price      *PriceFragment "json:\"price\" graphql:\"price\""
}
type provisionCustomer_ProvisionCustomer_Customer_CustomerFragment_Subscriptions_SubscriptionFragment_TotalPrice_TotalPriceFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type provisionCustomer_ProvisionCustomer_Customer_CustomerFragment_Subscriptions_SubscriptionFragment_TotalPrice_TotalPriceFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type provisionCustomer_ProvisionCustomer_Customer_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_Product struct {
	ID          string  "json:\"id\" graphql:\"id\""
	DisplayName *string "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description\" graphql:\"description\""
}
type provisionCustomer_ProvisionCustomer_Customer_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_BasePlan struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}
type provisionCustomer_ProvisionCustomer_Customer_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_Prices_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type provisionCustomer_ProvisionCustomer_Customer_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_DefaultTrialConfig struct {
	Duration float64          "json:\"duration\" graphql:\"duration\""
	Units    TrialPeriodUnits "json:\"units\" graphql:\"units\""
}
type provisionCustomer_ProvisionCustomer_Customer_CustomerFragment_Subscriptions_SubscriptionFragment_Addons struct {
	ID       string         "json:\"id\" graphql:\"id\""
	Quantity float64        "json:\"quantity\" graphql:\"quantity\""
	Addon    *AddonFragment "json:\"addon\" graphql:\"addon\""
}
type provisionCustomer_ProvisionCustomer_Subscription_SlimSubscriptionFragment_Prices_Price_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type provisionCustomer_ProvisionCustomer_Subscription_SlimSubscriptionFragment_Prices struct {
	UsageLimit *float64       "json:\"usageLimit\" graphql:\"usageLimit\""
	Price      *PriceFragment "json:\"price\" graphql:\"price\""
}
type provisionCustomer_ProvisionCustomer_Subscription_SlimSubscriptionFragment_TotalPrice_TotalPriceFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type provisionCustomer_ProvisionCustomer_Subscription_SlimSubscriptionFragment_TotalPrice_TotalPriceFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type provisionCustomer_ProvisionCustomer_Subscription_SlimSubscriptionFragment_Plan struct {
	ID string "json:\"id\" graphql:\"id\""
}
type provisionCustomer_ProvisionCustomer_Subscription_SlimSubscriptionFragment_Addons_Addon struct {
	ID string "json:\"id\" graphql:\"id\""
}
type provisionCustomer_ProvisionCustomer_Subscription_SlimSubscriptionFragment_Addons struct {
	Quantity float64                                                                                "json:\"quantity\" graphql:\"quantity\""
	Addon    provisionCustomer_ProvisionCustomer_Subscription_SlimSubscriptionFragment_Addons_Addon "json:\"addon\" graphql:\"addon\""
}
type provisionCustomer_ProvisionCustomer_Subscription_SlimSubscriptionFragment_Customer struct {
	ID string "json:\"id\" graphql:\"id\""
}
type provisionCustomer_ProvisionCustomer struct {
	Customer                     *CustomerFragment            "json:\"customer\" graphql:\"customer\""
	SubscriptionStrategyDecision SubscriptionDecisionStrategy "json:\"subscriptionStrategyDecision\" graphql:\"subscriptionStrategyDecision\""
	Subscription                 *SlimSubscriptionFragment    "json:\"subscription\" graphql:\"subscription\""
}
type importCustomer_ImportCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Prices_Price_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type importCustomer_ImportCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Prices struct {
	UsageLimit *float64       "json:\"usageLimit\" graphql:\"usageLimit\""
	Price      *PriceFragment "json:\"price\" graphql:\"price\""
}
type importCustomer_ImportCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_TotalPrice_TotalPriceFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type importCustomer_ImportCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_TotalPrice_TotalPriceFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type importCustomer_ImportCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_Product struct {
	ID          string  "json:\"id\" graphql:\"id\""
	DisplayName *string "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description\" graphql:\"description\""
}
type importCustomer_ImportCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_BasePlan struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}
type importCustomer_ImportCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_Prices_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type importCustomer_ImportCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_DefaultTrialConfig struct {
	Duration float64          "json:\"duration\" graphql:\"duration\""
	Units    TrialPeriodUnits "json:\"units\" graphql:\"units\""
}
type importCustomer_ImportCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Addons struct {
	ID       string         "json:\"id\" graphql:\"id\""
	Quantity float64        "json:\"quantity\" graphql:\"quantity\""
	Addon    *AddonFragment "json:\"addon\" graphql:\"addon\""
}
type updateCustomer_UpdateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Prices_Price_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type updateCustomer_UpdateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Prices struct {
	UsageLimit *float64       "json:\"usageLimit\" graphql:\"usageLimit\""
	Price      *PriceFragment "json:\"price\" graphql:\"price\""
}
type updateCustomer_UpdateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_TotalPrice_TotalPriceFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type updateCustomer_UpdateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_TotalPrice_TotalPriceFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type updateCustomer_UpdateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_Product struct {
	ID          string  "json:\"id\" graphql:\"id\""
	DisplayName *string "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description\" graphql:\"description\""
}
type updateCustomer_UpdateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_BasePlan struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}
type updateCustomer_UpdateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_Prices_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type updateCustomer_UpdateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Plan_PlanFragment_DefaultTrialConfig struct {
	Duration float64          "json:\"duration\" graphql:\"duration\""
	Units    TrialPeriodUnits "json:\"units\" graphql:\"units\""
}
type updateCustomer_UpdateCustomer_CustomerFragment_Subscriptions_SubscriptionFragment_Addons struct {
	ID       string         "json:\"id\" graphql:\"id\""
	Quantity float64        "json:\"quantity\" graphql:\"quantity\""
	Addon    *AddonFragment "json:\"addon\" graphql:\"addon\""
}
type createSubscription_CreateSubscription_SlimSubscriptionFragment_Prices_Price_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type createSubscription_CreateSubscription_SlimSubscriptionFragment_Prices struct {
	UsageLimit *float64       "json:\"usageLimit\" graphql:\"usageLimit\""
	Price      *PriceFragment "json:\"price\" graphql:\"price\""
}
type createSubscription_CreateSubscription_SlimSubscriptionFragment_TotalPrice_TotalPriceFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type createSubscription_CreateSubscription_SlimSubscriptionFragment_TotalPrice_TotalPriceFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type createSubscription_CreateSubscription_SlimSubscriptionFragment_Plan struct {
	ID string "json:\"id\" graphql:\"id\""
}
type createSubscription_CreateSubscription_SlimSubscriptionFragment_Addons_Addon struct {
	ID string "json:\"id\" graphql:\"id\""
}
type createSubscription_CreateSubscription_SlimSubscriptionFragment_Addons struct {
	Quantity float64                                                                     "json:\"quantity\" graphql:\"quantity\""
	Addon    createSubscription_CreateSubscription_SlimSubscriptionFragment_Addons_Addon "json:\"addon\" graphql:\"addon\""
}
type createSubscription_CreateSubscription_SlimSubscriptionFragment_Customer struct {
	ID string "json:\"id\" graphql:\"id\""
}
type provisionSubscription_ProvisionSubscriptionV2_Subscription_SlimSubscriptionFragment_Prices_Price_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type provisionSubscription_ProvisionSubscriptionV2_Subscription_SlimSubscriptionFragment_Prices struct {
	UsageLimit *float64       "json:\"usageLimit\" graphql:\"usageLimit\""
	Price      *PriceFragment "json:\"price\" graphql:\"price\""
}
type provisionSubscription_ProvisionSubscriptionV2_Subscription_SlimSubscriptionFragment_TotalPrice_TotalPriceFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type provisionSubscription_ProvisionSubscriptionV2_Subscription_SlimSubscriptionFragment_TotalPrice_TotalPriceFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type provisionSubscription_ProvisionSubscriptionV2_Subscription_SlimSubscriptionFragment_Plan struct {
	ID string "json:\"id\" graphql:\"id\""
}
type provisionSubscription_ProvisionSubscriptionV2_Subscription_SlimSubscriptionFragment_Addons_Addon struct {
	ID string "json:\"id\" graphql:\"id\""
}
type provisionSubscription_ProvisionSubscriptionV2_Subscription_SlimSubscriptionFragment_Addons struct {
	Quantity float64                                                                                          "json:\"quantity\" graphql:\"quantity\""
	Addon    provisionSubscription_ProvisionSubscriptionV2_Subscription_SlimSubscriptionFragment_Addons_Addon "json:\"addon\" graphql:\"addon\""
}
type provisionSubscription_ProvisionSubscriptionV2_Subscription_SlimSubscriptionFragment_Customer struct {
	ID string "json:\"id\" graphql:\"id\""
}
type provisionSubscription_ProvisionSubscriptionV2 struct {
	CheckoutURL  *string                     "json:\"checkoutUrl\" graphql:\"checkoutUrl\""
	Status       ProvisionSubscriptionStatus "json:\"status\" graphql:\"status\""
	Subscription *SlimSubscriptionFragment   "json:\"subscription\" graphql:\"subscription\""
}
type updateSubscription_UpdateSubscription_SlimSubscriptionFragment_Prices_Price_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type updateSubscription_UpdateSubscription_SlimSubscriptionFragment_Prices struct {
	UsageLimit *float64       "json:\"usageLimit\" graphql:\"usageLimit\""
	Price      *PriceFragment "json:\"price\" graphql:\"price\""
}
type updateSubscription_UpdateSubscription_SlimSubscriptionFragment_TotalPrice_TotalPriceFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type updateSubscription_UpdateSubscription_SlimSubscriptionFragment_TotalPrice_TotalPriceFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type updateSubscription_UpdateSubscription_SlimSubscriptionFragment_Plan struct {
	ID string "json:\"id\" graphql:\"id\""
}
type updateSubscription_UpdateSubscription_SlimSubscriptionFragment_Addons_Addon struct {
	ID string "json:\"id\" graphql:\"id\""
}
type updateSubscription_UpdateSubscription_SlimSubscriptionFragment_Addons struct {
	Quantity float64                                                                     "json:\"quantity\" graphql:\"quantity\""
	Addon    updateSubscription_UpdateSubscription_SlimSubscriptionFragment_Addons_Addon "json:\"addon\" graphql:\"addon\""
}
type updateSubscription_UpdateSubscription_SlimSubscriptionFragment_Customer struct {
	ID string "json:\"id\" graphql:\"id\""
}
type cancelSubscription_CancelSubscription_SlimSubscriptionFragment_Prices_Price_PriceFragment_Price struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type cancelSubscription_CancelSubscription_SlimSubscriptionFragment_Prices struct {
	UsageLimit *float64       "json:\"usageLimit\" graphql:\"usageLimit\""
	Price      *PriceFragment "json:\"price\" graphql:\"price\""
}
type cancelSubscription_CancelSubscription_SlimSubscriptionFragment_TotalPrice_TotalPriceFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type cancelSubscription_CancelSubscription_SlimSubscriptionFragment_TotalPrice_TotalPriceFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type cancelSubscription_CancelSubscription_SlimSubscriptionFragment_Plan struct {
	ID string "json:\"id\" graphql:\"id\""
}
type cancelSubscription_CancelSubscription_SlimSubscriptionFragment_Addons_Addon struct {
	ID string "json:\"id\" graphql:\"id\""
}
type cancelSubscription_CancelSubscription_SlimSubscriptionFragment_Addons struct {
	Quantity float64                                                                     "json:\"quantity\" graphql:\"quantity\""
	Addon    cancelSubscription_CancelSubscription_SlimSubscriptionFragment_Addons_Addon "json:\"addon\" graphql:\"addon\""
}
type cancelSubscription_CancelSubscription_SlimSubscriptionFragment_Customer struct {
	ID string "json:\"id\" graphql:\"id\""
}
type initiateCheckout_InitiateCheckout struct {
	ID                string "json:\"id\" graphql:\"id\""
	CheckoutURL       string "json:\"checkoutUrl\" graphql:\"checkoutUrl\""
	CheckoutBillingID string "json:\"checkoutBillingId\" graphql:\"checkoutBillingId\""
}
type estimateSubscription_EstimateSubscription_SubscriptionPreviewFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type estimateSubscription_EstimateSubscription_SubscriptionPreviewFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type estimateSubscription_EstimateSubscription_SubscriptionPreviewFragment_BillingPeriodRange struct {
	Start *string "json:\"start\" graphql:\"start\""
	End   *string "json:\"end\" graphql:\"end\""
}
type estimateSubscription_EstimateSubscription_SubscriptionPreviewFragment_Proration_Credit struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type estimateSubscription_EstimateSubscription_SubscriptionPreviewFragment_Proration_Debit struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type estimateSubscription_EstimateSubscription_SubscriptionPreviewFragment_Proration struct {
	ProrationDate string                                                                                 "json:\"prorationDate\" graphql:\"prorationDate\""
	Credit        estimateSubscription_EstimateSubscription_SubscriptionPreviewFragment_Proration_Credit "json:\"credit\" graphql:\"credit\""
	Debit         estimateSubscription_EstimateSubscription_SubscriptionPreviewFragment_Proration_Debit  "json:\"debit\" graphql:\"debit\""
}
type estimateSubscriptionUpdate_EstimateSubscriptionUpdate_SubscriptionPreviewFragment_SubTotal struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type estimateSubscriptionUpdate_EstimateSubscriptionUpdate_SubscriptionPreviewFragment_Total struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type estimateSubscriptionUpdate_EstimateSubscriptionUpdate_SubscriptionPreviewFragment_BillingPeriodRange struct {
	Start *string "json:\"start\" graphql:\"start\""
	End   *string "json:\"end\" graphql:\"end\""
}
type estimateSubscriptionUpdate_EstimateSubscriptionUpdate_SubscriptionPreviewFragment_Proration_Credit struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type estimateSubscriptionUpdate_EstimateSubscriptionUpdate_SubscriptionPreviewFragment_Proration_Debit struct {
	Amount   float64  "json:\"amount\" graphql:\"amount\""
	Currency Currency "json:\"currency\" graphql:\"currency\""
}
type estimateSubscriptionUpdate_EstimateSubscriptionUpdate_SubscriptionPreviewFragment_Proration struct {
	ProrationDate string                                                                                             "json:\"prorationDate\" graphql:\"prorationDate\""
	Credit        estimateSubscriptionUpdate_EstimateSubscriptionUpdate_SubscriptionPreviewFragment_Proration_Credit "json:\"credit\" graphql:\"credit\""
	Debit         estimateSubscriptionUpdate_EstimateSubscriptionUpdate_SubscriptionPreviewFragment_Proration_Debit  "json:\"debit\" graphql:\"debit\""
}
type reportUsage_CreateUsageMeasurement struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetCustomerByID struct {
	GetCustomerByRefID *CustomerFragment "json:\"getCustomerByRefId\" graphql:\"getCustomerByRefId\""
}
type GetCoupons struct {
	Coupons getCoupons_Coupons "json:\"coupons\" graphql:\"coupons\""
}
type GetPaywall struct {
	GetPaywall []*PaywallPlanFragment "json:\"getPaywall\" graphql:\"getPaywall\""
}
type GetEntitlements struct {
	Entitlements []*EntitlementFragment "json:\"entitlements\" graphql:\"entitlements\""
}
type GetEntitlement struct {
	Entitlement *EntitlementFragment "json:\"entitlement\" graphql:\"entitlement\""
}
type CreateCustomer struct {
	CreateCustomer *CustomerFragment "json:\"createCustomer\" graphql:\"createCustomer\""
}
type ProvisionCustomer struct {
	ProvisionCustomer provisionCustomer_ProvisionCustomer "json:\"provisionCustomer\" graphql:\"provisionCustomer\""
}
type ImportCustomer struct {
	ImportCustomer *CustomerFragment "json:\"importCustomer\" graphql:\"importCustomer\""
}
type UpdateCustomer struct {
	UpdateCustomer *CustomerFragment "json:\"updateCustomer\" graphql:\"updateCustomer\""
}
type CreateSubscription struct {
	CreateSubscription *SlimSubscriptionFragment "json:\"createSubscription\" graphql:\"createSubscription\""
}
type ProvisionSubscription struct {
	ProvisionSubscriptionV2 provisionSubscription_ProvisionSubscriptionV2 "json:\"provisionSubscriptionV2\" graphql:\"provisionSubscriptionV2\""
}
type UpdateSubscription struct {
	UpdateSubscription *SlimSubscriptionFragment "json:\"updateSubscription\" graphql:\"updateSubscription\""
}
type CancelSubscription struct {
	CancelSubscription *SlimSubscriptionFragment "json:\"cancelSubscription\" graphql:\"cancelSubscription\""
}
type InitiateCheckout struct {
	InitiateCheckout initiateCheckout_InitiateCheckout "json:\"initiateCheckout\" graphql:\"initiateCheckout\""
}
type EstimateSubscription struct {
	EstimateSubscription *SubscriptionPreviewFragment "json:\"estimateSubscription\" graphql:\"estimateSubscription\""
}
type EstimateSubscriptionUpdate struct {
	EstimateSubscriptionUpdate *SubscriptionPreviewFragment "json:\"estimateSubscriptionUpdate\" graphql:\"estimateSubscriptionUpdate\""
}
type ReportUsage struct {
	CreateUsageMeasurement reportUsage_CreateUsageMeasurement "json:\"createUsageMeasurement\" graphql:\"createUsageMeasurement\""
}

const GetCustomerByIDDocument = `query getCustomerById ($input: GetCustomerByRefIdInput!) {
	getCustomerByRefId(input: $input) {
		... CustomerFragment
	}
}
fragment PackageEntitlementFragment on PackageEntitlement {
	usageLimit
	hasUnlimitedUsage
	featureId
	resetPeriod
	feature {
		... FeatureFragment
	}
}
fragment PromotionalEntitlementFragment on PromotionalEntitlement {
	status
	usageLimit
	featureId
	hasUnlimitedUsage
	resetPeriod
	endDate
	isVisible
	feature {
		... FeatureFragment
	}
}
fragment CouponFragment on Coupon {
	id: refId
	name
	description
	type
	discountValue
	metadata: additionalMetaData
	createdAt
	updatedAt
	billingId
	billingLinkUrl
	status
}
fragment PriceFragment on Price {
	billingModel
	billingPeriod
	price {
		amount
		currency
	}
	feature {
		... FeatureFragment
	}
}
fragment FeatureFragment on Feature {
	id: refId
	featureType
	meterType
	featureUnits
	featureUnitsPlural
	displayName
	description
}
fragment TotalPriceFragment on CustomerSubscriptionTotalPrice {
	subTotal {
		amount
		currency
	}
	total {
		amount
		currency
	}
}
fragment PlanFragment on Plan {
	id: refId
	displayName
	description
	metadata: additionalMetaData
	product {
		id: refId
		displayName
		description
	}
	basePlan {
		id: refId
		displayName
	}
	entitlements {
		... PackageEntitlementFragment
	}
	inheritedEntitlements {
		... PackageEntitlementFragment
	}
	compatibleAddons {
		... AddonFragment
	}
	prices {
		... PriceFragment
	}
	pricingType
	defaultTrialConfig {
		duration
		units
	}
}
fragment AddonFragment on Addon {
	id: refId
	displayName
	description
	metadata: additionalMetaData
	entitlements {
		... PackageEntitlementFragment
	}
	pricingType
}
fragment CustomerFragment on Customer {
	id: refId
	name
	email
	createdAt
	updatedAt
	subscriptions {
		... SubscriptionFragment
	}
	promotionalEntitlements {
		... PromotionalEntitlementFragment
	}
	hasPaymentMethod
	coupon {
		... CouponFragment
	}
	billingId
	metadata: additionalMetaData
}
fragment SubscriptionFragment on CustomerSubscription {
	id: refId
	status
	startDate
	endDate
	trialEndDate
	cancellationDate
	effectiveEndDate
	currentBillingPeriodEnd
	metadata: additionalMetaData
	billingId
	billingLinkUrl
	prices {
		usageLimit
		price {
			... PriceFragment
		}
	}
	totalPrice {
		... TotalPriceFragment
	}
	pricingType
	plan {
		... PlanFragment
	}
	addons {
		id
		quantity
		addon {
			... AddonFragment
		}
	}
}
`

func (c *Client) GetCustomerByID(ctx context.Context, input GetCustomerByRefIDInput, interceptors ...clientv2.RequestInterceptor) (*GetCustomerByID, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res GetCustomerByID
	if err := c.Client.Post(ctx, "getCustomerById", GetCustomerByIDDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetCouponsDocument = `query getCoupons {
	coupons(filter: {status:{eq:ACTIVE}}, paging: {first:50}) {
		edges {
			node {
				... CouponFragment
			}
		}
	}
}
fragment CouponFragment on Coupon {
	id: refId
	name
	description
	type
	discountValue
	metadata: additionalMetaData
	createdAt
	updatedAt
	billingId
	billingLinkUrl
	status
}
`

func (c *Client) GetCoupons(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetCoupons, error) {
	vars := map[string]interface{}{}

	var res GetCoupons
	if err := c.Client.Post(ctx, "getCoupons", GetCouponsDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetPaywallDocument = `query getPaywall ($input: GetPaywallInput!) {
	getPaywall(input: $input) {
		... PaywallPlanFragment
	}
}
fragment PaywallPlanFragment on Plan {
	id: refId
	description
	displayName
	product {
		id: refId
		displayName
		description
	}
	basePlan {
		id: refId
		displayName
	}
	entitlements {
		... PaywallPackageEntitlementFragment
	}
	metadata: additionalMetaData
	inheritedEntitlements {
		... PaywallPackageEntitlementFragment
	}
	prices {
		... PaywallPriceFragment
	}
	pricingType
	defaultTrialConfig {
		duration
		units
	}
	compatibleAddons {
		... PaywallAddonFragment
	}
}
fragment PaywallPackageEntitlementFragment on PackageEntitlement {
	usageLimit
	hasUnlimitedUsage
	featureId
	resetPeriod
	feature {
		... FeatureFragment
	}
}
fragment FeatureFragment on Feature {
	id: refId
	featureType
	meterType
	featureUnits
	featureUnitsPlural
	displayName
	description
}
fragment PaywallPriceFragment on Price {
	billingModel
	billingPeriod
	price {
		amount
		currency
	}
	feature {
		... FeatureFragment
	}
}
fragment PaywallAddonFragment on Addon {
	id: refId
	displayName
	description
	entitlements {
		... PaywallPackageEntitlementFragment
	}
	prices {
		... PaywallPriceFragment
	}
	metadata: additionalMetaData
	pricingType
}
`

func (c *Client) GetPaywall(ctx context.Context, input GetPaywallInput, interceptors ...clientv2.RequestInterceptor) (*GetPaywall, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res GetPaywall
	if err := c.Client.Post(ctx, "getPaywall", GetPaywallDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetEntitlementsDocument = `query getEntitlements ($query: FetchEntitlementsQuery!) {
	entitlements: cachedEntitlements(query: $query) {
		... EntitlementFragment
	}
}
fragment EntitlementFragment on Entitlement {
	isGranted
	accessDeniedReason
	customerId
	usageLimit
	hasUnlimitedUsage
	currentUsage
	requestedUsage
	nextResetDate
	resetPeriod
	feature {
		... EntitlementFeatureFragment
	}
	resetPeriodConfiguration {
		... on MonthlyResetPeriodConfig {
			monthlyAccordingTo
		}
		... on WeeklyResetPeriodConfig {
			weeklyAccordingTo
		}
	}
}
fragment EntitlementFeatureFragment on EntitlementFeature {
	id: refId
	featureType
	meterType
	featureUnits
	featureUnitsPlural
	displayName
	description
}
`

func (c *Client) GetEntitlements(ctx context.Context, query FetchEntitlementsQuery, interceptors ...clientv2.RequestInterceptor) (*GetEntitlements, error) {
	vars := map[string]interface{}{
		"query": query,
	}

	var res GetEntitlements
	if err := c.Client.Post(ctx, "getEntitlements", GetEntitlementsDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetEntitlementDocument = `query getEntitlement ($query: FetchEntitlementQuery!) {
	entitlement(query: $query) {
		... EntitlementFragment
	}
}
fragment EntitlementFragment on Entitlement {
	isGranted
	accessDeniedReason
	customerId
	usageLimit
	hasUnlimitedUsage
	currentUsage
	requestedUsage
	nextResetDate
	resetPeriod
	feature {
		... EntitlementFeatureFragment
	}
	resetPeriodConfiguration {
		... on MonthlyResetPeriodConfig {
			monthlyAccordingTo
		}
		... on WeeklyResetPeriodConfig {
			weeklyAccordingTo
		}
	}
}
fragment EntitlementFeatureFragment on EntitlementFeature {
	id: refId
	featureType
	meterType
	featureUnits
	featureUnitsPlural
	displayName
	description
}
`

func (c *Client) GetEntitlement(ctx context.Context, query FetchEntitlementQuery, interceptors ...clientv2.RequestInterceptor) (*GetEntitlement, error) {
	vars := map[string]interface{}{
		"query": query,
	}

	var res GetEntitlement
	if err := c.Client.Post(ctx, "getEntitlement", GetEntitlementDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const CreateCustomerDocument = `mutation createCustomer ($input: CustomerInput!) {
	createCustomer: createOneCustomer(input: $input) {
		... CustomerFragment
	}
}
fragment CouponFragment on Coupon {
	id: refId
	name
	description
	type
	discountValue
	metadata: additionalMetaData
	createdAt
	updatedAt
	billingId
	billingLinkUrl
	status
}
fragment CustomerFragment on Customer {
	id: refId
	name
	email
	createdAt
	updatedAt
	subscriptions {
		... SubscriptionFragment
	}
	promotionalEntitlements {
		... PromotionalEntitlementFragment
	}
	hasPaymentMethod
	coupon {
		... CouponFragment
	}
	billingId
	metadata: additionalMetaData
}
fragment SubscriptionFragment on CustomerSubscription {
	id: refId
	status
	startDate
	endDate
	trialEndDate
	cancellationDate
	effectiveEndDate
	currentBillingPeriodEnd
	metadata: additionalMetaData
	billingId
	billingLinkUrl
	prices {
		usageLimit
		price {
			... PriceFragment
		}
	}
	totalPrice {
		... TotalPriceFragment
	}
	pricingType
	plan {
		... PlanFragment
	}
	addons {
		id
		quantity
		addon {
			... AddonFragment
		}
	}
}
fragment PriceFragment on Price {
	billingModel
	billingPeriod
	price {
		amount
		currency
	}
	feature {
		... FeatureFragment
	}
}
fragment TotalPriceFragment on CustomerSubscriptionTotalPrice {
	subTotal {
		amount
		currency
	}
	total {
		amount
		currency
	}
}
fragment PlanFragment on Plan {
	id: refId
	displayName
	description
	metadata: additionalMetaData
	product {
		id: refId
		displayName
		description
	}
	basePlan {
		id: refId
		displayName
	}
	entitlements {
		... PackageEntitlementFragment
	}
	inheritedEntitlements {
		... PackageEntitlementFragment
	}
	compatibleAddons {
		... AddonFragment
	}
	prices {
		... PriceFragment
	}
	pricingType
	defaultTrialConfig {
		duration
		units
	}
}
fragment PackageEntitlementFragment on PackageEntitlement {
	usageLimit
	hasUnlimitedUsage
	featureId
	resetPeriod
	feature {
		... FeatureFragment
	}
}
fragment PromotionalEntitlementFragment on PromotionalEntitlement {
	status
	usageLimit
	featureId
	hasUnlimitedUsage
	resetPeriod
	endDate
	isVisible
	feature {
		... FeatureFragment
	}
}
fragment FeatureFragment on Feature {
	id: refId
	featureType
	meterType
	featureUnits
	featureUnitsPlural
	displayName
	description
}
fragment AddonFragment on Addon {
	id: refId
	displayName
	description
	metadata: additionalMetaData
	entitlements {
		... PackageEntitlementFragment
	}
	pricingType
}
`

func (c *Client) CreateCustomer(ctx context.Context, input CustomerInput, interceptors ...clientv2.RequestInterceptor) (*CreateCustomer, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res CreateCustomer
	if err := c.Client.Post(ctx, "createCustomer", CreateCustomerDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ProvisionCustomerDocument = `mutation provisionCustomer ($input: ProvisionCustomerInput!) {
	provisionCustomer(input: $input) {
		customer {
			... CustomerFragment
		}
		subscriptionStrategyDecision
		subscription {
			... SlimSubscriptionFragment
		}
	}
}
fragment SlimSubscriptionFragment on CustomerSubscription {
	id: refId
	status
	metadata: additionalMetaData
	billingId
	billingLinkUrl
	effectiveEndDate
	currentBillingPeriodEnd
	pricingType
	prices {
		usageLimit
		price {
			... PriceFragment
		}
	}
	totalPrice {
		... TotalPriceFragment
	}
	plan {
		id: refId
	}
	addons {
		quantity
		addon {
			id: refId
		}
	}
	customer {
		id: refId
	}
}
fragment CustomerFragment on Customer {
	id: refId
	name
	email
	createdAt
	updatedAt
	subscriptions {
		... SubscriptionFragment
	}
	promotionalEntitlements {
		... PromotionalEntitlementFragment
	}
	hasPaymentMethod
	coupon {
		... CouponFragment
	}
	billingId
	metadata: additionalMetaData
}
fragment TotalPriceFragment on CustomerSubscriptionTotalPrice {
	subTotal {
		amount
		currency
	}
	total {
		amount
		currency
	}
}
fragment PackageEntitlementFragment on PackageEntitlement {
	usageLimit
	hasUnlimitedUsage
	featureId
	resetPeriod
	feature {
		... FeatureFragment
	}
}
fragment AddonFragment on Addon {
	id: refId
	displayName
	description
	metadata: additionalMetaData
	entitlements {
		... PackageEntitlementFragment
	}
	pricingType
}
fragment PromotionalEntitlementFragment on PromotionalEntitlement {
	status
	usageLimit
	featureId
	hasUnlimitedUsage
	resetPeriod
	endDate
	isVisible
	feature {
		... FeatureFragment
	}
}
fragment SubscriptionFragment on CustomerSubscription {
	id: refId
	status
	startDate
	endDate
	trialEndDate
	cancellationDate
	effectiveEndDate
	currentBillingPeriodEnd
	metadata: additionalMetaData
	billingId
	billingLinkUrl
	prices {
		usageLimit
		price {
			... PriceFragment
		}
	}
	totalPrice {
		... TotalPriceFragment
	}
	pricingType
	plan {
		... PlanFragment
	}
	addons {
		id
		quantity
		addon {
			... AddonFragment
		}
	}
}
fragment PriceFragment on Price {
	billingModel
	billingPeriod
	price {
		amount
		currency
	}
	feature {
		... FeatureFragment
	}
}
fragment FeatureFragment on Feature {
	id: refId
	featureType
	meterType
	featureUnits
	featureUnitsPlural
	displayName
	description
}
fragment PlanFragment on Plan {
	id: refId
	displayName
	description
	metadata: additionalMetaData
	product {
		id: refId
		displayName
		description
	}
	basePlan {
		id: refId
		displayName
	}
	entitlements {
		... PackageEntitlementFragment
	}
	inheritedEntitlements {
		... PackageEntitlementFragment
	}
	compatibleAddons {
		... AddonFragment
	}
	prices {
		... PriceFragment
	}
	pricingType
	defaultTrialConfig {
		duration
		units
	}
}
fragment CouponFragment on Coupon {
	id: refId
	name
	description
	type
	discountValue
	metadata: additionalMetaData
	createdAt
	updatedAt
	billingId
	billingLinkUrl
	status
}
`

func (c *Client) ProvisionCustomer(ctx context.Context, input ProvisionCustomerInput, interceptors ...clientv2.RequestInterceptor) (*ProvisionCustomer, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ProvisionCustomer
	if err := c.Client.Post(ctx, "provisionCustomer", ProvisionCustomerDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ImportCustomerDocument = `mutation importCustomer ($input: ImportCustomerInput!) {
	importCustomer: importOneCustomer(input: $input) {
		... CustomerFragment
	}
}
fragment PlanFragment on Plan {
	id: refId
	displayName
	description
	metadata: additionalMetaData
	product {
		id: refId
		displayName
		description
	}
	basePlan {
		id: refId
		displayName
	}
	entitlements {
		... PackageEntitlementFragment
	}
	inheritedEntitlements {
		... PackageEntitlementFragment
	}
	compatibleAddons {
		... AddonFragment
	}
	prices {
		... PriceFragment
	}
	pricingType
	defaultTrialConfig {
		duration
		units
	}
}
fragment AddonFragment on Addon {
	id: refId
	displayName
	description
	metadata: additionalMetaData
	entitlements {
		... PackageEntitlementFragment
	}
	pricingType
}
fragment PromotionalEntitlementFragment on PromotionalEntitlement {
	status
	usageLimit
	featureId
	hasUnlimitedUsage
	resetPeriod
	endDate
	isVisible
	feature {
		... FeatureFragment
	}
}
fragment CouponFragment on Coupon {
	id: refId
	name
	description
	type
	discountValue
	metadata: additionalMetaData
	createdAt
	updatedAt
	billingId
	billingLinkUrl
	status
}
fragment SubscriptionFragment on CustomerSubscription {
	id: refId
	status
	startDate
	endDate
	trialEndDate
	cancellationDate
	effectiveEndDate
	currentBillingPeriodEnd
	metadata: additionalMetaData
	billingId
	billingLinkUrl
	prices {
		usageLimit
		price {
			... PriceFragment
		}
	}
	totalPrice {
		... TotalPriceFragment
	}
	pricingType
	plan {
		... PlanFragment
	}
	addons {
		id
		quantity
		addon {
			... AddonFragment
		}
	}
}
fragment TotalPriceFragment on CustomerSubscriptionTotalPrice {
	subTotal {
		amount
		currency
	}
	total {
		amount
		currency
	}
}
fragment FeatureFragment on Feature {
	id: refId
	featureType
	meterType
	featureUnits
	featureUnitsPlural
	displayName
	description
}
fragment PackageEntitlementFragment on PackageEntitlement {
	usageLimit
	hasUnlimitedUsage
	featureId
	resetPeriod
	feature {
		... FeatureFragment
	}
}
fragment CustomerFragment on Customer {
	id: refId
	name
	email
	createdAt
	updatedAt
	subscriptions {
		... SubscriptionFragment
	}
	promotionalEntitlements {
		... PromotionalEntitlementFragment
	}
	hasPaymentMethod
	coupon {
		... CouponFragment
	}
	billingId
	metadata: additionalMetaData
}
fragment PriceFragment on Price {
	billingModel
	billingPeriod
	price {
		amount
		currency
	}
	feature {
		... FeatureFragment
	}
}
`

func (c *Client) ImportCustomer(ctx context.Context, input ImportCustomerInput, interceptors ...clientv2.RequestInterceptor) (*ImportCustomer, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ImportCustomer
	if err := c.Client.Post(ctx, "importCustomer", ImportCustomerDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const UpdateCustomerDocument = `mutation updateCustomer ($input: UpdateCustomerInput!) {
	updateCustomer: updateOneCustomer(input: $input) {
		... CustomerFragment
	}
}
fragment CustomerFragment on Customer {
	id: refId
	name
	email
	createdAt
	updatedAt
	subscriptions {
		... SubscriptionFragment
	}
	promotionalEntitlements {
		... PromotionalEntitlementFragment
	}
	hasPaymentMethod
	coupon {
		... CouponFragment
	}
	billingId
	metadata: additionalMetaData
}
fragment FeatureFragment on Feature {
	id: refId
	featureType
	meterType
	featureUnits
	featureUnitsPlural
	displayName
	description
}
fragment PackageEntitlementFragment on PackageEntitlement {
	usageLimit
	hasUnlimitedUsage
	featureId
	resetPeriod
	feature {
		... FeatureFragment
	}
}
fragment AddonFragment on Addon {
	id: refId
	displayName
	description
	metadata: additionalMetaData
	entitlements {
		... PackageEntitlementFragment
	}
	pricingType
}
fragment PromotionalEntitlementFragment on PromotionalEntitlement {
	status
	usageLimit
	featureId
	hasUnlimitedUsage
	resetPeriod
	endDate
	isVisible
	feature {
		... FeatureFragment
	}
}
fragment CouponFragment on Coupon {
	id: refId
	name
	description
	type
	discountValue
	metadata: additionalMetaData
	createdAt
	updatedAt
	billingId
	billingLinkUrl
	status
}
fragment SubscriptionFragment on CustomerSubscription {
	id: refId
	status
	startDate
	endDate
	trialEndDate
	cancellationDate
	effectiveEndDate
	currentBillingPeriodEnd
	metadata: additionalMetaData
	billingId
	billingLinkUrl
	prices {
		usageLimit
		price {
			... PriceFragment
		}
	}
	totalPrice {
		... TotalPriceFragment
	}
	pricingType
	plan {
		... PlanFragment
	}
	addons {
		id
		quantity
		addon {
			... AddonFragment
		}
	}
}
fragment PriceFragment on Price {
	billingModel
	billingPeriod
	price {
		amount
		currency
	}
	feature {
		... FeatureFragment
	}
}
fragment TotalPriceFragment on CustomerSubscriptionTotalPrice {
	subTotal {
		amount
		currency
	}
	total {
		amount
		currency
	}
}
fragment PlanFragment on Plan {
	id: refId
	displayName
	description
	metadata: additionalMetaData
	product {
		id: refId
		displayName
		description
	}
	basePlan {
		id: refId
		displayName
	}
	entitlements {
		... PackageEntitlementFragment
	}
	inheritedEntitlements {
		... PackageEntitlementFragment
	}
	compatibleAddons {
		... AddonFragment
	}
	prices {
		... PriceFragment
	}
	pricingType
	defaultTrialConfig {
		duration
		units
	}
}
`

func (c *Client) UpdateCustomer(ctx context.Context, input UpdateCustomerInput, interceptors ...clientv2.RequestInterceptor) (*UpdateCustomer, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res UpdateCustomer
	if err := c.Client.Post(ctx, "updateCustomer", UpdateCustomerDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const CreateSubscriptionDocument = `mutation createSubscription ($input: SubscriptionInput!) {
	createSubscription(subscription: $input) {
		... SlimSubscriptionFragment
	}
}
fragment FeatureFragment on Feature {
	id: refId
	featureType
	meterType
	featureUnits
	featureUnitsPlural
	displayName
	description
}
fragment TotalPriceFragment on CustomerSubscriptionTotalPrice {
	subTotal {
		amount
		currency
	}
	total {
		amount
		currency
	}
}
fragment SlimSubscriptionFragment on CustomerSubscription {
	id: refId
	status
	metadata: additionalMetaData
	billingId
	billingLinkUrl
	effectiveEndDate
	currentBillingPeriodEnd
	pricingType
	prices {
		usageLimit
		price {
			... PriceFragment
		}
	}
	totalPrice {
		... TotalPriceFragment
	}
	plan {
		id: refId
	}
	addons {
		quantity
		addon {
			id: refId
		}
	}
	customer {
		id: refId
	}
}
fragment PriceFragment on Price {
	billingModel
	billingPeriod
	price {
		amount
		currency
	}
	feature {
		... FeatureFragment
	}
}
`

func (c *Client) CreateSubscription(ctx context.Context, input SubscriptionInput, interceptors ...clientv2.RequestInterceptor) (*CreateSubscription, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res CreateSubscription
	if err := c.Client.Post(ctx, "createSubscription", CreateSubscriptionDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ProvisionSubscriptionDocument = `mutation provisionSubscription ($input: ProvisionSubscriptionInput!) {
	provisionSubscriptionV2(input: $input) {
		checkoutUrl
		status
		subscription {
			... SlimSubscriptionFragment
		}
	}
}
fragment TotalPriceFragment on CustomerSubscriptionTotalPrice {
	subTotal {
		amount
		currency
	}
	total {
		amount
		currency
	}
}
fragment SlimSubscriptionFragment on CustomerSubscription {
	id: refId
	status
	metadata: additionalMetaData
	billingId
	billingLinkUrl
	effectiveEndDate
	currentBillingPeriodEnd
	pricingType
	prices {
		usageLimit
		price {
			... PriceFragment
		}
	}
	totalPrice {
		... TotalPriceFragment
	}
	plan {
		id: refId
	}
	addons {
		quantity
		addon {
			id: refId
		}
	}
	customer {
		id: refId
	}
}
fragment PriceFragment on Price {
	billingModel
	billingPeriod
	price {
		amount
		currency
	}
	feature {
		... FeatureFragment
	}
}
fragment FeatureFragment on Feature {
	id: refId
	featureType
	meterType
	featureUnits
	featureUnitsPlural
	displayName
	description
}
`

func (c *Client) ProvisionSubscription(ctx context.Context, input ProvisionSubscriptionInput, interceptors ...clientv2.RequestInterceptor) (*ProvisionSubscription, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ProvisionSubscription
	if err := c.Client.Post(ctx, "provisionSubscription", ProvisionSubscriptionDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const UpdateSubscriptionDocument = `mutation updateSubscription ($input: UpdateSubscriptionInput!) {
	updateSubscription: updateOneSubscription(input: $input) {
		... SlimSubscriptionFragment
	}
}
fragment SlimSubscriptionFragment on CustomerSubscription {
	id: refId
	status
	metadata: additionalMetaData
	billingId
	billingLinkUrl
	effectiveEndDate
	currentBillingPeriodEnd
	pricingType
	prices {
		usageLimit
		price {
			... PriceFragment
		}
	}
	totalPrice {
		... TotalPriceFragment
	}
	plan {
		id: refId
	}
	addons {
		quantity
		addon {
			id: refId
		}
	}
	customer {
		id: refId
	}
}
fragment PriceFragment on Price {
	billingModel
	billingPeriod
	price {
		amount
		currency
	}
	feature {
		... FeatureFragment
	}
}
fragment FeatureFragment on Feature {
	id: refId
	featureType
	meterType
	featureUnits
	featureUnitsPlural
	displayName
	description
}
fragment TotalPriceFragment on CustomerSubscriptionTotalPrice {
	subTotal {
		amount
		currency
	}
	total {
		amount
		currency
	}
}
`

func (c *Client) UpdateSubscription(ctx context.Context, input UpdateSubscriptionInput, interceptors ...clientv2.RequestInterceptor) (*UpdateSubscription, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res UpdateSubscription
	if err := c.Client.Post(ctx, "updateSubscription", UpdateSubscriptionDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const CancelSubscriptionDocument = `mutation cancelSubscription ($input: SubscriptionCancellationInput!) {
	cancelSubscription(input: $input) {
		... SlimSubscriptionFragment
	}
}
fragment SlimSubscriptionFragment on CustomerSubscription {
	id: refId
	status
	metadata: additionalMetaData
	billingId
	billingLinkUrl
	effectiveEndDate
	currentBillingPeriodEnd
	pricingType
	prices {
		usageLimit
		price {
			... PriceFragment
		}
	}
	totalPrice {
		... TotalPriceFragment
	}
	plan {
		id: refId
	}
	addons {
		quantity
		addon {
			id: refId
		}
	}
	customer {
		id: refId
	}
}
fragment PriceFragment on Price {
	billingModel
	billingPeriod
	price {
		amount
		currency
	}
	feature {
		... FeatureFragment
	}
}
fragment FeatureFragment on Feature {
	id: refId
	featureType
	meterType
	featureUnits
	featureUnitsPlural
	displayName
	description
}
fragment TotalPriceFragment on CustomerSubscriptionTotalPrice {
	subTotal {
		amount
		currency
	}
	total {
		amount
		currency
	}
}
`

func (c *Client) CancelSubscription(ctx context.Context, input SubscriptionCancellationInput, interceptors ...clientv2.RequestInterceptor) (*CancelSubscription, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res CancelSubscription
	if err := c.Client.Post(ctx, "cancelSubscription", CancelSubscriptionDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const InitiateCheckoutDocument = `mutation initiateCheckout ($input: InitiateCheckoutInput!) {
	initiateCheckout(input: $input) {
		id
		checkoutUrl
		checkoutBillingId
	}
}
`

func (c *Client) InitiateCheckout(ctx context.Context, input InitiateCheckoutInput, interceptors ...clientv2.RequestInterceptor) (*InitiateCheckout, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res InitiateCheckout
	if err := c.Client.Post(ctx, "initiateCheckout", InitiateCheckoutDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const EstimateSubscriptionDocument = `mutation estimateSubscription ($input: EstimateSubscriptionInput!) {
	estimateSubscription(input: $input) {
		... SubscriptionPreviewFragment
	}
}
fragment SubscriptionPreviewFragment on SubscriptionPreview {
	subTotal {
		amount
		currency
	}
	total {
		amount
		currency
	}
	billingPeriodRange {
		start
		end
	}
	proration {
		prorationDate
		credit {
			amount
			currency
		}
		debit {
			amount
			currency
		}
	}
}
`

func (c *Client) EstimateSubscription(ctx context.Context, input EstimateSubscriptionInput, interceptors ...clientv2.RequestInterceptor) (*EstimateSubscription, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res EstimateSubscription
	if err := c.Client.Post(ctx, "estimateSubscription", EstimateSubscriptionDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const EstimateSubscriptionUpdateDocument = `mutation estimateSubscriptionUpdate ($input: EstimateSubscriptionUpdateInput!) {
	estimateSubscriptionUpdate(input: $input) {
		... SubscriptionPreviewFragment
	}
}
fragment SubscriptionPreviewFragment on SubscriptionPreview {
	subTotal {
		amount
		currency
	}
	total {
		amount
		currency
	}
	billingPeriodRange {
		start
		end
	}
	proration {
		prorationDate
		credit {
			amount
			currency
		}
		debit {
			amount
			currency
		}
	}
}
`

func (c *Client) EstimateSubscriptionUpdate(ctx context.Context, input EstimateSubscriptionUpdateInput, interceptors ...clientv2.RequestInterceptor) (*EstimateSubscriptionUpdate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res EstimateSubscriptionUpdate
	if err := c.Client.Post(ctx, "estimateSubscriptionUpdate", EstimateSubscriptionUpdateDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ReportUsageDocument = `mutation reportUsage ($input: UsageMeasurementCreateInput!) {
	createUsageMeasurement(usageMeasurement: $input) {
		id
	}
}
`

func (c *Client) ReportUsage(ctx context.Context, input UsageMeasurementCreateInput, interceptors ...clientv2.RequestInterceptor) (*ReportUsage, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ReportUsage
	if err := c.Client.Post(ctx, "reportUsage", ReportUsageDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}
